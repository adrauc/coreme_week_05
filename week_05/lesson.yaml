- Class: meta
  Course: coreme week 05
  Lesson: week 05
  Author: Adrian Rauchfleisch (borrowed parts from Nick Carchedi)
  Type: Standard
  Organization: National Taiwan University
  Version: 2.4.3

- Class: text
  Output: Dear Taida students, welcome to my R and RStudio introduction course. Whenever you see three points below (e.g. `...`) then press the Enter-key to continue the lesson. Now press the Enter-key to continue.

- Class: text
  Output: In this lesson, we`ll cover matrices and data frames. Both represent `rectangular` data types, meaning that they are used to store tabular data, with rows and columns.  

- Class: text
  Output: In social science rows are usually cases (e.g. respondents in a survey, tweets, users etc.). Columns are variables - representing characteristics or answers.

- Class: text
  Output: The main difference, as you'll see, is that matrices can only contain a single class of data, while data frames can consist of many different classes of data. More about this later.

- Class: text
  Output: Whenever you're working with a new dataset, the first thing you should do is look at it! What is the format of the data? What are the dimensions? What are the variable names? How are the variables stored? Are there missing data? Are there any flaws in the data?

- Class: text
  Output: This lesson will teach you how to answer these questions and more using R's built-in functions. We'll be using a dataset constructed from the United States Department of Agriculture's PLANTS Database (http://plants.usda.gov/adv_search.html).

- Class: cmd_question
  Output: I've stored the data for you in a variable called plants. Type ls() to list the variables in your workspace, among which should be plants.
  CorrectAnswer: ls()
  AnswerTests: omnitest(correctExpr='ls()')
  Hint: Use ls() to list the variables in your workspace.

- Class: cmd_question
  Output: Let's begin by checking the class of the plants variable with class(plants). This will give us a clue as to the overall structure of the data.
  CorrectAnswer: class(plants)
  AnswerTests: omnitest(correctExpr='class(plants)')
  Hint: Use class(plants) to check the class of the plants variable.

- Class: text
  Output: It's very common for data to be stored in a data frame. It is the default class for data read into R using functions like read.csv() and read.table(), which you'll learn about in another lesson.

- Class: cmd_question
  Output: Since the dataset is stored in a data frame, we know it is rectangular. In other words, it has two dimensions (rows and columns) and fits neatly into a table or spreadsheet. Use dim(plants) to see exactly how many rows and columns we're dealing with.
  CorrectAnswer: dim(plants)
  AnswerTests: omnitest(correctExpr='dim(plants)')
  Hint: Use dim(plants) to see the exact dimensions of the plants dataset.

- Class: text
  Output: The first number you see (5166) is the number of rows (observations) and the second number (10) is the number of columns (variables). 

- Class: cmd_question
  Output: You can also use nrow(plants) to see only the number of rows. Try it out.
  CorrectAnswer: nrow(plants)
  AnswerTests: omnitest(correctExpr='nrow(plants)')
  Hint: Use nrow(plants) to see only the number of rows.

- Class: cmd_question
  Output: ... And ncol(plants) to see only the number of columns.
  CorrectAnswer: ncol(plants)
  AnswerTests: omnitest(correctExpr='ncol(plants)')
  Hint: Use ncol(plants) to see only the number of columns.

- Class: cmd_question
  Output: If you are curious as to how much space the dataset is occupying in memory, you can use object.size(plants).
  CorrectAnswer: object.size(plants)
  AnswerTests: omnitest(correctExpr='object.size(plants)')
  Hint: object.size(plants) will tell you how much memory is occupyed by the plants data frame.

- Class: cmd_question
  Output: Now that we have a sense of the shape and size of the dataset, let's get a feel for what's inside. names(plants) will return a character vector of column (i.e. variable) names. Give it a shot.
  CorrectAnswer: names(plants)
  AnswerTests: omnitest(correctExpr='names(plants)')
  Hint: names(plants) will return a character vector of column (i.e. variable) names.

- Class: text
  Output: We've applied fairly descriptive variable names to this dataset, but that won't always be the case. A logical next step is to peek at the actual data. However, our dataset contains over 5000 observations (rows), so it's impractical to view the whole thing all at once.
  
- Class: cmd_question
  Output: The head() function allows you to preview the top of the dataset. Give it a try with only one argument.
  CorrectAnswer: head(plants)
  AnswerTests: omnitest(correctExpr='head(plants)')
  Hint: head(plants) will show you the very top of the dataset.

- Class: text
  Output: Take a minute to look through and understand the the output above. Each row is labeled with the observation number and each column with the variable name. Your screen is probably not wide enough to view all 10 columns side-by-side, in which case R displays as many columns as it can on each line before continuing on the next.

- Class: cmd_question
  Output: By default, head() shows you the first six rows of the data. You can alter this behavior by passing as a second argument the number of rows you'd like to view. Use head() to preview the first 10 rows of plants.
  CorrectAnswer: head(plants, 10)
  AnswerTests: omnitest(correctExpr='head(plants, 10)')
  Hint: head(plants, 10) will show you the first 10 rows of the dataset.

- Class: cmd_question
  Output: The same applies for using tail() to preview the end of the dataset. Use tail() to view the last 15 rows.
  CorrectAnswer: tail(plants, 15)
  AnswerTests: omnitest(correctExpr='tail(plants, 15)')
  Hint: tail(plants, 15) will show you the last 15 rows of the dataset.

- Class: cmd_question
  Output: After previewing the top and bottom of the data, you probably noticed lots of NAs, which are R's placeholders for missing values. Use summary(plants) to get a better feel for how each variable is distributed and how much of the dataset is missing.
  CorrectAnswer: summary(plants)
  AnswerTests: omnitest(correctExpr='summary(plants)')
  Hint: Try summary(plants) to look at how each variable is distributed and how many missing values we are dealing with.

- Class: text
  Output: summary() provides different output for each variable, depending on its class. For numeric data such as Precip_Min, summary() displays the minimum, 1st quartile, median, mean, 3rd quartile, and maximum. These values help us understand how the data are distributed.

- Class: text
  Output: For categorical variables (called 'factor' variables in R), summary() displays the number of times each value (or 'level') occurs in the data. For example, each value of Scientific_Name only appears once, since it is unique to a specific plant. In contrast, the summary for Duration (also a factor variable) tells us that our dataset contains 3031 Perennial plants, 682 Annual plants, etc.

- Class: cmd_question
  Output: You can see that R truncated the summary for Active_Growth_Period by including a catch-all category called 'Other'. Since it is a categorical/factor variable, we can see how many times each value actually occurs in the data with table(plants$Active_Growth_Period).
  CorrectAnswer: table(plants$Active_Growth_Period)
  AnswerTests: omnitest(correctExpr='table(plants$Active_Growth_Period)')
  Hint: table(plants$Active_Growth_Period) will display counts for each level of the factor variable.

- Class: text
  Output: Each of the functions we've introduced so far has its place in helping you to better understand the structure of your data. However, we've left the best for last....

- Class: cmd_question
  Output: Perhaps the most useful and concise function for understanding the *str*ucture of your data is str(). Give it a try now.
  CorrectAnswer: str(plants)
  AnswerTests: omnitest(correctExpr='str(plants)')
  Hint: Use str(plants) to look at the structure of your data.

- Class: text
  Output: The beauty of str() is that it combines many of the features of the other functions you've already seen, all in a concise and readable format. At the very top, it tells us that the class of plants is 'data.frame' and that it has 5166 observations and 10 variables. It then gives us the name and class of each variable, as well as a preview of its contents.

- Class: text
  Output: str() is actually a very general function that you can use on most objects in R. Any time you want to understand the structure of something (a dataset, function, etc.), str() is a good place to start.

- Class: text
  Output: So far you learned how to get a feel for the structure and contents of a new dataset using a collection of simple and useful functions. Taking the time to do this upfront can save you time and frustration later on in your analysis.
  
- Class: cmd_question
  Output: Let's create a vector containing the numbers 1 through 20 using the `:` operator. Store the result in a variable called my_vector.
  CorrectAnswer: my_vector <- 1:20
  AnswerTests: omnitest(correctExpr='my_vector <- 1:20')
  Hint: Type 1:20 with no spaces. Make sure to use a regular colon and NOT a semi-colon.

- Class: cmd_question
  Output: View the contents of the vector you just created.
  CorrectAnswer: my_vector
  AnswerTests: omnitest(correctExpr='my_vector')
  Hint: Type my_vector to view its contents.

- Class: cmd_question
  Output: You can always check the structure of an object using the str() function. Try that now with my_vector.
  CorrectAnswer: str(my_vector)
  AnswerTests: omnitest(correctExpr='str(my_vector)')
  Hint: Type str(my_vector).
  
- Class: cmd_question
  Output: The dim() function tells us the 'dimensions' of an object. What happens if we do dim(my_vector)? Give it a try.
  CorrectAnswer: dim(my_vector)
  AnswerTests: omnitest(correctExpr='dim(my_vector)')
  Hint: Just type dim(my_vector) to see what happens.

- Class: cmd_question
  Output: Clearly, that`s not very helpful! Since my_vector is a vector, it doesn`t have a `dim` attribute (so it's just NULL), but we can find its length using the length() function. Try that now.
  CorrectAnswer: length(my_vector)
  AnswerTests: omnitest(correctExpr='length(my_vector)')
  Hint: Type length(my_vector) to view the length of the vector you just created.

- Class: cmd_question
  Output: Ah! That's what we wanted. But, what happens if we give my_vector a `dim` attribute? Let's give it a try. Type dim(my_vector) <- c(4, 5).
  CorrectAnswer: dim(my_vector) <- c(4, 5)
  AnswerTests: omnitest(correctExpr='dim(my_vector) <- c(4, 5)')
  Hint: Type dim(my_vector) <- c(4, 5) to give my_vector a `dim` attribute.

- Class: text
  Output: It's okay if that last command seemed a little strange to you. It should! The dim() function allows you to get OR set the `dim` attribute for an R object. In this case, we assigned the value c(4, 5) to the `dim` attribute of my_vector.

- Class: cmd_question
  Output: Use dim(my_vector) to confirm that we've set the `dim` attribute correctly.
  CorrectAnswer: dim(my_vector)
  AnswerTests: omnitest(correctExpr='dim(my_vector)')
  Hint: Just type dim(my_vector) to make sure the `dim` attribute has been set.
  
- Class: cmd_question
  Output: Another way to see this is by calling the attributes() function on my_vector. Try it now.
  CorrectAnswer: attributes(my_vector)
  AnswerTests: omnitest(correctExpr='attributes(my_vector)')
  Hint: The command attributes(my_vector) will show you all of the attributes for the my_vector object.

- Class: text
  Output: Just like in math class, when dealing with a 2-dimensional object (think rectangular table), the first number is the number of rows and the second is the number of columns. Therefore, we just gave my_vector 4 rows and 5 columns.

- Class: cmd_question
  Output: But, wait! That doesn`t sound like a vector any more. Well, it`s not. Now it's a matrix. View the contents of my_vector now to see what it looks like.
  CorrectAnswer: my_vector
  AnswerTests: omnitest(correctExpr='my_vector')
  Hint: Type my_vector to view its contents.

- Class: cmd_question
  Output: Now, let`s confirm it's actually a matrix by using the class() function. Type class(my_vector) to see what I mean.
  CorrectAnswer: class(my_vector)
  AnswerTests: omnitest(correctExpr='class(my_vector)')
  Hint: Type class(my_vector) to view the class of my_vector.

- Class: cmd_question
  Output: Sure enough, my_vector is now a matrix. We should store it in a new variable that helps us remember what it is. Store the value of my_vector in a new variable called my_matrix.
  CorrectAnswer: my_matrix <- my_vector
  AnswerTests: omnitest(correctExpr='my_matrix <- my_vector')
  Hint: Since we can't just change the name of our my_vector variable, we'll assign its value to a new variable with my_matrix <- my_vector.

- Class: text
  Output: The example that we've used so far was meant to illustrate the point that a matrix is simply an atomic vector with a dimension attribute. A more direct method of creating the same matrix uses the matrix() function.

- Class: cmd_question
  Output: Bring up the help file for the matrix() function now using the `?` function.
  CorrectAnswer: ?matrix
  AnswerTests: omnitest(correctExpr='?matrix')
  Hint: The command ?matrix will do the trick.

- Class: cmd_question
  Output: Now, look at the documentation for the matrix function and see if you can figure out how to create a matrix containing the same numbers (1-20) and dimensions (4 rows, 5 columns) by calling the matrix() function. Store the result in a variable called my_matrix2. Use 1:20 as an argument in matrix().
  CorrectAnswer: my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
  AnswerTests: calculates_same_value('matrix(1:20, nrow=4, ncol=5)'); expr_creates_var('my_matrix2')
  Hint: Call the matrix() function with three arguments -- 1:20, the number of rows, and the number of columns. Be sure to specify arguments by their proper names and store the result in my_matrix2 (not in my_matrix).

- Class: cmd_question
  Output: Finally, let's confirm that my_matrix and my_matrix2 are actually identical. The identical() function will tell us if its first two arguments are the same. Try it out.
  CorrectAnswer: identical(my_matrix, my_matrix2)
  AnswerTests: any_of_exprs('identical(my_matrix, my_matrix2)', 'identical(my_matrix2, my_matrix)')
  Hint: If you're not sure about this one, then checkout the documentation for identical() using the `?` function.

- Class: text
  Output: Now, imagine that the numbers in our table represent some measurements from a Twitter analysis, where each row represents one user and each column represents one variable.

- Class: text
  Output: We may want to label the rows, so that we know which numbers belong to each user in our analysis. One way to do this is to add a column to the matrix, which contains the names of all four users.

- Class: cmd_question
  Output: Let's start by creating a character vector containing the names of our users -- realDonaldTrump, BarackObama, EmmanuelMacron, and HassanRouhani. Remember that double quotes tell R that something is a character string. Store the result in a variable called screen_name.
  CorrectAnswer: screen_name <- c("realDonaldTrump", "BarackObama", "EmmanuelMacron", "HassanRouhani")
  AnswerTests: omnitest(correctExpr='screen_name <- c("realDonaldTrump", "BarackObama", "EmmanuelMacron", "HassanRouhani")')
  Hint: Make sure to copy each name (with the right capitalization) and to store the result in a variable called screen_name. Also, don't get the order of the users mixed up! 

- Class: cmd_question
  Output: Now we`ll use the cbind() function to `combine columns`. Don't worry about storing the result in a new variable. Just call cbind() with two arguments -- the screen_name vector and my_matrix.
  CorrectAnswer: cbind(screen_name, my_matrix)
  AnswerTests: omnitest(correctExpr='cbind(screen_name, my_matrix)')
  Hint: Type cbind(screen_name, my_matrix) to add the names of our users to the matrix of numbers.

- Class: text
  Output: Something is fishy about our result! It appears that combining the character vector with our matrix of numbers caused everything to be enclosed in double quotes. This means we're left with a matrix of character strings, which is no good.

- Class: text
  Output: If you remember back to the beginning of this lesson, I told you that matrices can only contain ONE class of data. Therefore, when we tried to combine a character vector with a numeric matrix, R was forced to 'coerce' the numbers to characters, hence the double quotes.

- Class: text
  Output: This is called `implicit coercion`, because we didn`t ask for it. It just happened. But why didn`t R just convert the names of our users to numbers? I'll let you ponder that question on your own.

- Class: cmd_question
  Output: So, we're still left with the question of how to include the names of our users in the table without destroying the integrity of our numeric data. Try the following -- my_data <- data.frame(screen_name, my_matrix)
  CorrectAnswer: my_data <- data.frame(screen_name, my_matrix)
  AnswerTests: omnitest(correctExpr='my_data <- data.frame(screen_name, my_matrix)')
  Hint: Type my_data <- data.frame(screen_name, my_matrix), so we can explore what happens.

- Class: cmd_question
  Output: Now view the contents of my_data to see what we've come up with.
  CorrectAnswer: my_data
  AnswerTests: omnitest(correctExpr='my_data')
  Hint: Type my_data to view its contents.

- Class: text
  Output: It looks like the data.frame() function allowed us to store our character vector of names right alongside our matrix of numbers. That's exactly what we were hoping for! 

- Class: text
  Output: Behind the scenes, the data.frame() function takes any number of arguments and returns a single object of class `data.frame` that is composed of the original objects.

- Class: cmd_question
  Output: Let's confirm this by calling the class() function on our newly created data frame.
  CorrectAnswer: class(my_data)
  AnswerTests: omnitest(correctExpr='class(my_data)')
  Hint: The class function takes one argument -- the object of which you want to determine the class.

- Class: text
  Output: It's also possible to assign names to the individual rows and columns of a data frame, which presents another possible way of determining which row of values in our table belongs to each user.

- Class: text
  Output: However, since we've already solved that problem, let's solve a different problem by assigning names to the columns of our data frame so that we know what type of measurement each column represents.

- Class: cmd_question
  Output: Since we have six columns (including user scree_names), we'll need to first create a vector containing one element for each column. Create a character vector called cnames that contains the following values (in order) -- "screen_name", "followers_count", "friends_count", "statuses_count", "favorites_count", "listed_count".
  CorrectAnswer: cnames <- c("screen_name", "followers_count", "friends_count", "statuses_count", "favorites_count", "listed_count")
  AnswerTests: omnitest(correctExpr='cnames <- c("screen_name", "followers_count", "friends_count", "statuses_count", "favorites_count", "listed_count")')
  Hint: Make sure all of the names are lowercase, surrounded by double quotes, and separated with commas. Don't forget to use the c() function.

- Class: cmd_question
  Output: Now, use the colnames() function to set the `colnames` attribute for our data frame. This is similar to the way we used the dim() function earlier in this lesson. Use colnames() with my_data as argument and after the function add <- cnames
  CorrectAnswer: colnames(my_data) <- cnames
  AnswerTests: omnitest(correctExpr='colnames(my_data) <- cnames')
  Hint: Try colnames(my_data) <- cnames.

  
- Class: cmd_question
  Output: Let's see if that got the job done. Print the contents of my_data.
  CorrectAnswer: my_data
  AnswerTests: omnitest(correctExpr='my_data')
  Hint: Print the contents of my_data to the console.

- Class: text
  Output: We will now work with real data collected over the Twitter API with the rtweet package. You should see in the environment the objects tweets with 4675 obs.

- Class: cmd_question
  Output: You can check the number of rows with nrow(). Try it with tweets!
  CorrectAnswer: nrow(tweets)
  AnswerTests: omnitest(correctExpr='nrow(tweets)')
  Hint: Just use the function nrow and add tweets as argument.

- Class: cmd_question
  Output: Now check what class the object has with the function class.
  CorrectAnswer: class(tweets)
  AnswerTests: omnitest(correctExpr='class(tweets)')
  Hint: Just use the function nrow and add tweets as argument.

- Class: text
  Output: As you can see it is a data frame.

- Class: cmd_question
  Output: Let's see a summary of the data frame tweets with the summary() function.
  CorrectAnswer: summary(tweets)
  AnswerTests: omnitest(correctExpr='summary(tweets)')
  Hint: Just use the function summary and add tweets as argument.  


- Class: cmd_question
  Output: Let`s test subsetting. Use the box brackets [] to subset the first column which has the index number 1. Remember - [row,column]. Try to just call the first column
  CorrectAnswer: tweets[ ,1]
  AnswerTests: omnitest(correctExpr='tweets[ ,1]')
  Hint: type tweets[ ,1]. Left we keep empty as we want all "rows" of column 1.  

- Class: text
  Output: As you can see - we get back the column as a vector. 

- Class: cmd_question
  Output: We can also subest a column as vector if we use the $ subset (mydf$name_of_column). Try to call the first column user_id of the tweets data frame with the $.
  CorrectAnswer: tweets$user_id
  AnswerTests: omnitest(correctExpr='tweets$user_id')
  Hint: Just type tweets$user_id. 

- Class: text
  Output: Now we get also a vector as you can see. With a data frame both approaches return a vector.

- Class: cmd_question
  Output: Let`s check a preview of the data above in the source code window. Type View(tweets)
  CorrectAnswer: View(tweets)
  AnswerTests: omnitest(correctExpr='View(tweets)')
  Hint: Just type View(tweets). 

- Class: cmd_question
  Output: Scroll a little to the right - we focus now on the column reply_to_status_id. Subset this column with the $ and save it in a new object called reply.
  CorrectAnswer: reply <- tweets$reply_to_status_id
  AnswerTests: omnitest(correctExpr='reply <- tweets$reply_to_status_id')
  Hint: Just type reply <- tweets$reply_to_status_id.  

- Class: cmd_question
  Output: NA value means no value available. All NA are not replies. If there is value it is a reply to a specific tweets. Let`s check the first 20 values of reply with 1:20 and []
  CorrectAnswer: reply[1:20]
  AnswerTests: omnitest(correctExpr='reply[1:20]')
  Hint: Use the reply object together with the subset [1:20]. 

- Class: cmd_question
  Output: Very few replies in our dataset - but at least one among the first 20 tweets. Let`s use the is.na() function together with reply as argument. 
  CorrectAnswer: is.na(reply)
  AnswerTests: omnitest(correctExpr='is.na(reply)')
  Hint: Just type is.na(reply). 
  
- Class: text
  Output: is.na() yields a vector of logical values the same length as reply, with TRUEs corresponding to NA values in replies and FALSEs corresponding to non-NA values in reply.

- Class: text
  Output: Let's start by indexing with logical vectors. One common scenario when working with real-world data is that we want to extract all elements of a vector that are NA. Recall that is.na(reply) yields a vector of logical values the same length as reply, with TRUEs corresponding to NA values in reply and FALSEs corresponding to non-NA values in reply.

- Class: mult_question
  Output: What do you think reply[is.na(reply)] will give you?
  AnswerChoices: A vector of all NAs (ids of replied tweets); A vector with no NAs (ids of replied tweets); A vector of all NAs (no ids of replied tweets); A vector of TRUEs and FALSEs; A vector of length 0
  CorrectAnswer: A vector of all NAs (no ids of replied tweets)
  AnswerTests: omnitest(correctVal="A vector of all NAs (no ids of replied tweets)")
  Hint: Remember that is.na(replies) tells us where the NAs are in a vector. NA means here no reply - thus no ids. So if we subset x based on that, what do you expect to happen?

- Class: cmd_question
  Output: Prove it to yourself by typing reply[is.na(reply)].
  CorrectAnswer: reply[is.na(reply)]
  AnswerTests: omnitest(correctExpr='reply[is.na(reply)]')
  Hint: Type reply[is.na(reply)] to see that you get all NAs.

- Class: cmd_question
  Output: The operator `!` gives us the negation of a logical expression, so !is.na(x) can be read as `is not NA`. Type reply[!is.na(reply)]. Give it a try.
  CorrectAnswer: reply[!is.na(reply)]
  AnswerTests: omnitest(correctExpr='reply[!is.na(reply)]')
  Hint: Type reply[!is.na(reply)] to capture all non-missing values from reply.

- Class: cmd_question
  Output: Let`s subset now directly all replies. We now directly call the column with tweets$reply_to_status_id. We use !is.na(tweets$reply_to_status_id) and put it as subset for the rows. Type tweets[!is.na(tweets$reply_to_status_id), ]
  CorrectAnswer: tweets[!is.na(tweets$reply_to_status_id), ]
  AnswerTests: omnitest(correctExpr='tweets[!is.na(tweets$reply_to_status_id), ]')
  Hint: Type tweets[!is.na(tweets$reply_to_status_id), ].

- Class: text
  Output: As you can see, we now have selected only replies (see the relevant columns in the console).

- Class: cmd_question
  Output: Let`s try the is_retweet column. Let`s check with str(tweets$is_retweet) what kind of data this column has.
  CorrectAnswer: str(tweets$is_retweet)
  AnswerTests: omnitest(correctExpr='str(tweets$is_retweet)')
  Hint: Type str(tweets$is_retweet).

- Class: cmd_question
  Output: We have the data class logical. TRUE means obviously "is retweet". Try to directly subset all retweets with this column. Use tweets$is_retweet inside of the [] to select the retweets in the dataset.
  CorrectAnswer: tweets[tweets$is_retweet, ]
  AnswerTests: omnitest(correctExpr='tweets[tweets$is_retweet, ]')
  Hint: Type tweets[tweets$is_retweet, ].

- Class: text
  Output: You can always save your subsets in a new object with name_new_object <- ...

- Class: cmd_question
  Output: Almost finished for today - let`s try the table function with the column lang. Subset the column lang of the tweets object and use it as argument inside of table()
  CorrectAnswer: table(tweets$lang)
  AnswerTests: omnitest(correctExpr='table(tweets$lang)')
  Hint: Just type table(tweets$lang). 
  
- Class: text
  Output: I was using "taiwan OR 臺灣" as search query to collect the tweets. The majority of tweets are written in English.

- Class: cmd_question
  Output: Let's focus on one last column - created_at. Check the max value in this column with max() and $ subset.
  CorrectAnswer: max(tweets$created_at)
  AnswerTests: omnitest(correctExpr='max(tweets$created_at)')
  Hint: Just type max(tweets$created_at). 

- Class: cmd_question
  Output: That is the newest tweet. Check the min value in this column with min() and $ subset.
  CorrectAnswer: min(tweets$created_at)
  AnswerTests: omnitest(correctExpr='min(tweets$created_at)')
  Hint: Just type min(tweets$created_at). 

- Class: cmd_question
  Output: Now use both functions together and subtract the min value from the max value with max() - min().
  CorrectAnswer: max(tweets$created_at) - min(tweets$created_at)
  AnswerTests: omnitest(correctExpr='max(tweets$created_at) - min(tweets$created_at)')
  Hint: Just type max(tweets$created_at) - min(tweets$created_at). 

- Class: text
  Output: With 5000 tweets I can cover 4 hours with my search terms.

- Class: text
  Output: Important points this week - difference between data frames and matrices, how to subest data frames, and how to use is.na().

- Class: mult_question
  Output: Thank you for finishing this class. Press Enter and then please copy the completion code that will appear in the console after this question into the google form I created (check your email). Would you like to get the completion code? Type the number next to Yes and press Enter - then you need to Enter your student id and name.
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: get_token()
  Hint: NULL

